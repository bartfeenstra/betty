name: Build PyInstaller artifacts (Release)

on:
  release:
    types:
      - published

jobs:
  pyinstaller:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-20.04
            dist_name: betty-linux
          - name: macOS
            os: macos-11
            dist_name: betty-macos
          - name: Windows
            os: windows-2019
            dist_name: betty-windows
    steps:
      - name: Check out the source code
        uses: actions/checkout@v4

      - name: Get the pip cache directory
        run: echo "pip_cache_dir=$(pip cache dir)" >> $GITHUB_ENV
        shell: bash

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ env.pip_cache_dir }}
          key: pip-${{ runner.os }}-${{ hashFiles('./setup.py') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Get the npm cache directory
        run: echo "npm_cache_dir=$(npm config get cache)" >> $GITHUB_ENV
        shell: bash

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ${{ env.npm_cache_dir }}
          key: npm-${{ runner.os }}-${{ hashFiles('./package.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install APT dependencies
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          apt_packages=(
            libegl1-mesa # For Qt
            libx11-xcb-dev # For Qt
            '^libxcb.*-dev' # For Qt
            libxkbcommon-x11-0 # For Qt
          )
          sudo apt-get install "${apt_packages[@]}"

      - name: Build the executable
        run: ./bin/build-pyinstaller ${{ github.event.release.tag_name }}
        shell: bash

      - name: Zip the Linux package
        if: startsWith(runner.os, 'Linux')
        run: zip -r -X ./dist/${{ matrix.dist_name }}-${{ github.event.pull_request.head.sha }}.zip ./dist/betty
        shell: bash

      - name: Zip the macOS package
        if: startsWith(runner.os, 'macOS')
        run: zip -r -X ./dist/${{ matrix.dist_name }}-${{ github.event.pull_request.head.sha }}.zip ./dist/betty
        shell: bash

      - name: Zip the Windows package
        if: startsWith(runner.os, 'Windows')
        run: Compress-Archive .\dist\betty .\dist\${{ matrix.dist_name }}-${{ github.event.pull_request.head.sha }}.zip

      - name: Publish the package
        run: gh release upload ${{ github.event.release.tag_name }} ./dist/${{ matrix.dist_name }}.zip --clobber
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
